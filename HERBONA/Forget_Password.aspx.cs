using SmartTrucking.Model;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Script.Serialization;
using System.Web.Script.Services;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Net.Mail;
using System.Text;

namespace SmartTrucking
{
    public partial class Forget_Password : System.Web.UI.Page
    {
        public static DBFunctions db = new DBFunctions();
        public static Hashtable ReturnData = new Hashtable();
        public static Hashtable ht_param = new Hashtable();
        public static Hashtable ht_param2 = new Hashtable();
        public static DataSet ds = new DataSet();
        public static DataTable dt = new DataTable();

        public static JavaScriptSerializer serializer = new JavaScriptSerializer();
        static List<ErrorModel> _ErrorModel = new List<ErrorModel>();


        protected void Page_Load(object sender, EventArgs e)
        {

        }
        [System.Web.Services.WebMethod]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public static Hashtable LoginDetails(Hashtable ht, string Type, string Req)
        {
            ReturnData.Clear();
            try
            {
                ht_param.Clear();
                ht_param.Add("@EMAIL", ht["Email"].ToString());
                ht_param.Add("@MODE", ht["MODE"].ToString());
                ds = db.SysFetchDataInDataSet("[CHANGE_RESET_PASSWORD]", ht_param);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    string CustomErrorState = ds.Tables[0].Rows[0]["CustomErrorState"].ToString().Trim();
                    string CustomMessage = ds.Tables[0].Rows[0]["CustomMessage"].ToString().Trim();

                    if (CustomErrorState == "0")
                    {

                        if (ds.Tables.Count >= 2)
                        {

                            string ToEmail_id = ds.Tables[1].Rows[0]["Email"].ToString().Trim();
                            string New_password = ds.Tables[1].Rows[0]["newpasswd"].ToString().Trim();
                            string Name = ds.Tables[1].Rows[0]["Name"].ToString().Trim();                            

                            var myMailMessage = new System.Net.Mail.MailMessage();
                            myMailMessage.From = new System.Net.Mail.MailAddress("<noreply> projectmailtest19@gmail.com");
                            myMailMessage.To.Add(ToEmail_id);// Mail would be sent to this address
                            myMailMessage.IsBodyHtml = true;
                            myMailMessage.Subject = "New Autogenerated Password From ";
                            myMailMessage.Body = "<span> Dear " + Name + ",<br/><br/></span><span>Thank you for changing your password<br/> </span><span><b>Your New Password is :" + New_password + "</b></span>";
                            var smtpServer = new System.Net.Mail.SmtpClient("ftp.gmail.com");
                            smtpServer.Host = ("smtp.gmail.com");
                            smtpServer.Port = 587;
                            smtpServer.Credentials = new System.Net.NetworkCredential("projectmailtest19@gmail.com", "Admin@123#");
                            smtpServer.EnableSsl = true;
                            smtpServer.Send(myMailMessage);

                        }

                        _ErrorModel.Clear();
                        ReturnData.Clear();
                        ErrorModel _error = new ErrorModel();
                        _error.Error = "0";
                        _error.ErrorMessage = CustomMessage;
                        _ErrorModel.Add(_error);
                        ReturnData["ErrorDetail"] = serializer.Serialize(_ErrorModel);

                    }

                    else if (CustomErrorState == "1")
                    {

                        _ErrorModel.Clear();
                        ReturnData.Clear();
                        ErrorModel _error = new ErrorModel();
                        _error.Error = "1";
                        _error.ErrorMessage = "Some problem occurred please try again later";
                        _ErrorModel.Add(_error);
                        ReturnData["ErrorDetail"] = serializer.Serialize(_ErrorModel);
                        HttpContext.Current.Response.AppendHeader("ResponseHeader", "500");
                    }

                    else if (CustomErrorState == "2")
                    {

                        _ErrorModel.Clear();
                        ReturnData.Clear();
                        ErrorModel _error = new ErrorModel();
                        _error.Error = "2";
                        _error.ErrorMessage = CustomMessage;

                        _ErrorModel.Add(_error);
                        ReturnData["ErrorDetail"] = serializer.Serialize(_ErrorModel);
                        HttpContext.Current.Response.AppendHeader("ResponseHeader", "500");
                    }
                }
                else
                {
                    _ErrorModel.Clear();
                    ReturnData.Clear();
                    ErrorModel _error = new ErrorModel();
                    _error.Error = "2";
                    _error.ErrorMessage = "Some problem occurred please try again later";
                    _ErrorModel.Add(_error);
                    ReturnData["ErrorDetail"] = serializer.Serialize(_ErrorModel);
                    HttpContext.Current.Response.AppendHeader("ResponseHeader", "500");
                }

            }
            catch (Exception ex)
            {
                _ErrorModel.Clear();
                ReturnData.Clear();
                ErrorModel _error = new ErrorModel();
                _error.Error = "2";
                _error.ErrorMessage = "Some problem occurred please try again later";
                _ErrorModel.Add(_error);
                ReturnData["ErrorDetail"] = serializer.Serialize(_ErrorModel);
                HttpContext.Current.Response.AppendHeader("ResponseHeader", "500");
            }
            return ReturnData;
        }
    }
}